
@properties
header: ast.gen.hpp
source: ast.gen.cpp
derive: Node

@header_head
#ifndef _LIBCQASM2_AST_GEN_H_
#define _LIBCQASM2_AST_GEN_H_

#include <cstdlib>
#include <cstdint>
#include <string>
#include <sstream>
#include <vector>

#include "cqasm2/ast/node.hpp"
#include "cqasm2/ast/operators.hpp"

using namespace cqasm2;

namespace cqasm2 { namespace ast {

@header_foot
}}

#endif

@source_head
#include "ast.gen.hpp"

using namespace cqasm2;

namespace cqasm2 { namespace ast {

@source_foot
}}

@classes

Operand:
    / Represents any operand.

    Type:
        / Represents any resource type token, such as "uint<64>".

        TypeLiteral:
            / Represents a type AST node, before constant folding to figure out the
            / actual type used by the typesystem.

            QubitType:
                / Represents a qubit type token, i.e. "qubit".

            NumericType: \
                    c bool has_sign Whether this is a signed or unsigned type. |\
                    &ro Expression ibits Number of bits before the decimal separator. |\
                    &ro Expression fbits Number of bits after the decimal separator.
                / Represents a numeric type token, such as "uint<64>".

            FloatType:
                / Represents a float type token, i.e. "float".

            DoubleType:
                / Represents a double type token, i.e. "double".

        ### ParsedType: \
        ###         c cqasm2::typesystem::Type typ Parsed type. |\
        ###         &ro TypeLiteral Original AST node that was used to construct this literal.
        ###     / Represents a parsed type.

    Expression:
        / Represents any expression.

        NumericLiteral:
            / Represents unparsed numeric literals.

            DecLiteral: \
                    c std::string val The value as it appears in the source file.
                / Represents a number in decimal integer notation.

            HexLiteral: \
                    c std::string val The value as it appears in the source file.
                / Represents a number in hexadecimal notation.

            BinLiteral: \
                    c std::string val The value as it appears in the source file.
                / Represents a number in binary notation.

            FloatLiteral: \
                    c std::string val The value as it appears in the source file.
                / Represents a number in decimal float notation.

            NamedLiteral: \
                    c std::string name The name of the constant.
                / Represents a number by means of a named constant.

        ### ParsedLiteral: \
        ###         c cqasm2::typesystem::Value val Parsed value of the literal. |\
        ###         &ro NumericLiteral node Original AST node that was used to construct this literal.
        ###     / Represents a numeric literal; anything ranging from "10" to
        ###     / "0xDEADC0DE" to "im". When printing, the printed literal will
        ###     / always print a representation of val, but may use the original
        ###     / AST node to choose between equivalent representations.

        ArrayLiteral: \
                &rc ExpressionList data Data contained within the array literal.
            / Represents array literals.

        Reference:
            / Represents identifier-based references.

            Identifier: \
                    c std::string name Identifier.
                / Represents any identifier in an expression. This can ultimately
                / resolve to almost anything (like a label) or not be resolved at
                / all, at the discretion of the context which the expression is
                / used in.

            ResourceRef: \
                    &rc Resource res Resolved resource. |\
                    &ro Identifier id Original identifier that was used for this reference, if any.
                / Represents an identifier that was resolved to a resource. When
                / printing, the uniquified name of the resource is used.

            MacroParamRef: \
                    &rc MacroDef macro Macro definition this parameter was resolved to. |\
                    c int param Parameter index. |\
                    &ro Identifier id Original identifier that was used for this reference, if any.
                / Represents an identifier that was resolved to one of the
                / parameters of a macro def statement.

            MacroIterRef: \
                    &rc MacroFor macro For loop that this parameter was resolved to. |\
                    &ro Identifier id Original identifier that was used for this reference, if any.
                / Represents an identifier that was resolved to the loop variable
                / of a macro for statement.

            LabelRef: \
                    &rc Label lbl Label that this identifier was resolved to. |\
                    &ro Identifier id Original identifier that was used for this reference, if any.
                / Represents an identifier that was resolved to a label.

        Subscript: \
                &rc Expression expr Expression to disambiguate with subscript notation. |\
                c std::string subscript The subscript text.
            / Represents a disambiguation subscript. This is used for qubits,
            / to select between the qubit itself and its measurement register
            / in contexts where both are allowed.

        Indexation: \
                &rc Expression expr Expression to index. |\
                &rc IndexList indices List of index entries to index by.
            / Represents an index notation, i.e. of the form "a[b]".

        Operation: \
                sc operator_t oper Operator description. |\
                &rc Expression op1 Operand 1. |\
                &ro Expression op2 Operand 2, or null if unary. |\
                &ro Expression op3 Operand 3, or null if unary/binary.
            / Represents an operator.

        Function: \
                c std::string name Function name. |\
                &rc ExpressionList ops Operand list.
            / Represents a function call.

        TypeCast: \
                &rc Type typ Type to cast to. |\
                &rc Expression expr Expression to typecast.
            / Represents a typecast expression.

        ShiftCast: \
                c bool dir False: (&rgt;&rgt;a)b = shift decimal point left; true: (&rlt;&rlt;a)b = shift decimal point right. |\
                &rc Expression shamt Shift amount. |\
                &rc Expression expr Expression to typecast.
            / Represents a shift-decimal-point typecast expression.

        ErroneousExpression:
            / Represents an erroneous expression. This is inserted by the
            / parser to recover from errors.

    MatrixLiteral:
        / Represents a matrix literal.

        MatrixLiteral1: \
                &rc ExpressionList data Represents the data contained in this matrix. Each expression is alternatingly the real resp. imaginary part of the matrix. The matrix must furthermore be square.
            / cQASM 1.0 notation for a matrix.

        MatrixLiteral2: \
                &rv ExpressionList row List of rows. The index into the enclosed ExpressionList is the column index, and each individual Expression is cast to a complex number.
            / cQASM 2.0 notation for a matrix.

    StringLiteral: \
            c std::string data Contained string literal.
        / Represents a string literal.

    JsonLiteral: \
            c std::string data Contained JSON string.
        / Represents a JSON literal.

    ### ParsedJsonLiteral: \
    ###         &rc nlohmann::json json JSON object representing this literal.
    ###     / Represents a parsed JSON literal.

ExpressionList: \
        &rv Expression expr Vector of all the expressions in this list.
    / Represents a list of expressions.

OperandList: \
        &rv Operand oper Vector of all the operands in this list.
    / Represents a list of operands.

IdentifierList: \
        v std::string id Vector of all the identifier strings in this list.
    / Represents a list of identifiers.

IndexEntry: \
        &rc Expression first First index in this range, or the selected index if singular. |\
        &ro Expression last Last index in this range, or null if singular.
    / Represents either a singular entry or a range within a list of indices.

IndexList: \
        &rv IndexEntry ent Vector of all the expressions in this list.
    / Represents a list of indices.

StringBuilder: \
        n std::ostringstream os String builder to append to.
    / Represents the contents of a string or JSON literal as its being parsed.

AnnotationData: \
        c std::string target Name of the target that this pragma/annotation is intended for. |\
        c std::string name Name of the pragma/annotation. |\
        &ro OperandList ops List of operands, if specified, that are attached to the annotation/pragma.
    / Represents the data contained in an annotation or pragma.

GateType: \
        c std::string name Name of the gate. |\
        &rv Expression cond Conditional expressions.
    / Represents the name of a gate and its conditions for execution.

Gate:
    / Represents a gate that may or may not have been resolved.

    UnresolvedGate: \
            &rv AnnotationData annot Gate annotations.
        / Represents an unresolved gate, including annotations.

        NormalGate: \
                &rc GateType typ Contains the name of the gate and its conditional expressions. |\
                &ro OperandList src Source operand list. |\
                &ro OperandList dest Destination operand list.
            / Represents a normal gate, expressed as an instruction.

        IfGoto: \
                &rc Reference lbl Name of the label to jump to. |\
                &ro Expression cond The condition for jumping, or null for always.
            / Represents the syntactic sugar if-goto notation for branches.

    ### JsonGate: \
    ###         &rc NormalGate gate Gate description from the source code. |\
    ###         &rc nlohmann::json json JSON object from the definition file that describes this gate.
    ###     / Represents a gate that was resolved to the JSON specification.

    MacroCall: \
            &rc NormalGate gate Gate description from the source code. |\
            &rc MacroDef macro Macro that this gate was resolved to.
        / Represents a call to a macro.

Statement: \
        &rv AnnotationData annot Statement annotations.
    / Represents a statement.

    Pragma: \
            &rc AnnotationData data Data belonging to this pragma statement.
        / Represents a pragma statement.

    Resource: \
            - std::string unique Uniquified name. This must be set when anything is set to refer to this resource.
        / Represents a statement that declares a resource.

        QubitRegister1: \
                &rc NumericLiteral nqubits Number of qubits.
            / Represents cQASM 1.0's qubit resource notation.

        ScalarResource: \
                &rc Type typ Type of the resource. |\
                c std::string name Name of the resource. |\
                &ro Expression init Initializer expression.
            / Represents a scalar resource declaration.

        ArrayResource: \
                &rc Type typ Type of the array entries. |\
                c std::string name Name of the resource. |\
                &rc Expression size Array size expression. |\
                &ro Expression init Initializer expression.
            / Represents an array resource declaration.

        LetStatement: \
                c std::string name Name of the resource. |\
                &rc Expression init Initializer expression.
            / Represents a "let" statement.

    Mapping: \
            c std::string name Name of the mapping. |\
            &ro Expression expr Expression to map to.
        / Represents a statement that declares a mapping.

    Assignment: \
            &rc Expression lvalue Expression to be assigned. |\
            &rc Expression rvalue What to assign the lvalue to.
        / Represents an assignment statement.

    MacroDef: \
            c std::string name Name of the macro subroutine. |\
            &rc Block blk Contents of the macro. |\
            &ro IdentifierList src Source parameter names. |\
            &ro IdentifierList dest Destination parameter names. |\
            - std::string unique Uniquified name. This must be set when anything is set to refer to this resource.
        / Represents a macro subroutine.

    MacroFor: \
            c std::string iter Name of the loop control variable. |\
            &rc IndexList indices Indices to iterate over. |\
            &rc Block blk Contents of the macro.
        / Represents a macro for loop.

    MacroIfElse: \
            &rc Expression cond Condition expression. |\
            &rc Block blk_true Block to insert if the expression is true. |\
            &ro Block blk_false Block to insert if the expression is false.
        / Represents a macro if/else.

    Include: \
            &rc StringLiteral fname Filename.
        / Represents an include statement.

    Subcircuit: \
            c std::string name Subcircuit name. |\
            &ro NumericLiteral iter Iteration count, or null if not specified.
        / Represents a subcircuit header.

    Label: \
            c std::string name Label name. |\
            - std::string unique Uniquified name. This must be set before anything is set to refer to this label.
        / Represents a label for classical flow control.

    Bundle: \
            &rVv Gate gate List of gates in this bundle.
        / Represents a collection of gates.

    ErroneousStatement:
        / Represents an erroneous statement. This is inserted by the parser to
        / recover from errors.

Block: \
        &rv Statement stmt Vector of all statements in this list.
    / Represents a collection of statements and name resolution information.

Program: \
        c std::string version Version string. |\
        &rc Block blk Block of code representing the program.
